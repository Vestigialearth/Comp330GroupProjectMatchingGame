import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.*;

//Version 1.0, Final draft:

public class MatchingGameComp330Final implements ActionListener {
        String[][] CardsToMatch = 
     
        //Begin matrix
        { 
        {"Red", "Red"}, 
        {"Green", "Green"},
        {"Blue", "Blue" }, 
        {"Yellow", "Yellow"}, 
        {"Purple", "Purple"},
        {"Orange", "Orange"},
        {"Gray", "Grey" },
        {"Teal", "Teal"},
        {"Lavender", "Lavender" }
        };
        //End matrix
        
        //import variables
    
        JButton[][] buttonsForGame;
        JPanel myPanel;
        JFrame myFrame;
        //End of import variables
        
        //Non-import variables
        boolean hasFlipped = true;
        int firstCardChosen; //This variable was formerly known as "card"; changed for readability
        int secondCardChosen; //This variable was formerly known as "secIndex"; changed for readability
        int genericInt = 0;
    
    
        //End of Non-import variables
        
      public void DealCardsToMatch(JPanel panel) {
                buttonsForGame = new JButton[4][]; 
                for (int genericInt= 0; genericInt< 4*4; genericInt++) {
                    if (genericInt%4 == 0) buttonsForGame[genericInt/4] = new JButton[4];
                    buttonsForGame[genericInt/4][genericInt%4] = new JButton("Face-down");
                    //Cards are instantiated face down
                    buttonsForGame[genericInt/4][genericInt%4].addActionListener(this);
                    panel.add(buttonsForGame[genericInt/4][genericInt%4]);
                    //This is where shuffling would be added, for demonstration is easier to not
                }
      }
      
        public  void makeGUI() {    
                JFrame tempFrameForGUI = new JFrame("MatchingGameComp330-Final");
                tempFrameForGUI.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                //
                myPanel = new JPanel(new GridLayout(4,4));
                myPanel.setPreferredSize(new Dimension(750, 500));
                //
                DealCardsToMatch(myPanel); 
                // 
                tempFrameForGUI.getContentPane().setLayout(new BorderLayout());
                tempFrameForGUI.getContentPane().add(myPanel,BorderLayout.CENTER);
                //
                // Instantiates a display
                tempFrameForGUI.pack();
                tempFrameForGUI.setSize(750,750); //size of buttons
                tempFrameForGUI.setVisible(true);
      }
    
              public void actionPerformed(ActionEvent e) {
                int k,j;
             
                if (genericInt<2) { //find the chosen card and flip it
                    for (k=0; k< 4; k++) {
                        for (j=0; j< 4; j++) {
                            // if the card is not face down, don't flip
                            if ((e.getSource()== buttonsForGame[k][j]) && buttonsForGame[k][j].getText().equals("Face-down")){
                                // flip the card face-up to show text from CardsToMatch
                                buttonsForGame[k][j].setText(CardsToMatch[(k*4+j)/2][(k*4+j)%2]);
                                genericInt++; // increment number of cards flipped
                                if (genericInt==1) firstCardChosen = (k*4+j)/2; //pattern saved first
                                else secondCardChosen = (k*4+j)/2; //pattern saved second
                                return;
                            }
                        }
                    }
                } else { // 2 cards already flipped, put all cards face down
                    for (k=0; k< 4; k++) {
                        for (j=0; j< 4; j++) {
                            if (firstCardChosen == secondCardChosen) { //for matched cards
                                if (!buttonsForGame[k][j].getText().equals("Face-down")) // leave face down cards down
                                    buttonsForGame[k][j].setText("-Solved-");//when the cards are matched, show the solved symbol
                            } else if ((!buttonsForGame[k][j].getText().equals("-Solved-")) && (!buttonsForGame[k][j].getText().equals("Face-down")))
                            {
                                buttonsForGame[k][j].setText("Face-down"); // flip cards back down if not matching
                        }
                        genericInt=0; // new turn, no cards flipped face up
                    }
                }
            }
      }
        
      public void updateCardsToMatch(String a, String b, boolean math) {
            int i,j;
            String[][] listOfColors; //formerly listCurrent
            int pVal = CardsToMatch.length;
    
            if (math) { // add the new temp to the list
                listOfColors = new String[pVal+1][];
                listOfColors[0] = new String[2];
                listOfColors[0][0] = new String(a);//instantiates a new color
                listOfColors[0][1] = new String(b); //instantiates the matching new color
                for (int temp=1; temp<= pVal; temp++) {
                    listOfColors[temp][0] = CardsToMatch[temp-1][0];
                    listOfColors[temp][1] = CardsToMatch[temp-1][1];
                }
                CardsToMatch = listOfColors;
            } else { // delete matching temp
                listOfColors = new String[pVal-1][];
                listOfColors[0] = new String[2];
                listOfColors[0][0] = new String(a);//instantiates a new color
                listOfColors[0][1] = new String(b);//instantiates the new matching color
                for (int temp=0; temp<= pVal; temp++) {
                    if (a != listOfColors[temp][0]) {
                        listOfColors[temp][0] = CardsToMatch[temp][0];
                        listOfColors[temp][1] = CardsToMatch[temp][1];
                    }
                }
                CardsToMatch = listOfColors;
            }
        }
    
     public static void main(String[] args) {
                    //Schedule a job for the event-dispatching thread
                    //to create application and display its GUI
                    javax.swing.SwingUtilities.invokeLater(new Runnable() 
               {
                    public void run() {
                            MatchingGameComp330Final game = new MatchingGameComp330Final();
                            game.makeGUI();
                    }
               }
          );
       }
    
}
